{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import datetime\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Getting COVID testing data from https://ourworldindata.org/grapher/full-list-cumulative-total-tests-per-thousand"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import date, timedelta\n",
    "# get_tests_data takes a dataframe with test data for a specified country,\n",
    "# creates an array of tests per 1000 people for every day since date start0\n",
    "# in case of missing entries for some day, repeats the entry from previous available day\n",
    "def get_tests_data(df, country):\n",
    "    country_total_test = df.loc[df['Entity'] == country]\n",
    "    tests_data = []\n",
    "    start = datetime.datetime.strptime(list(country_total_test['Date'])[0], '%b %d, %Y')\n",
    "    start0 = start\n",
    "    num_of_tests = float(list(country_total_test['Total tests per thousand'])[0])\n",
    "    #print(start, num_of_tests)\n",
    "    tests_data.append(num_of_tests)\n",
    "    for d in list(country_total_test['Date']):\n",
    "        num_of_tests = float(country_total_test.loc[country_total_test['Date']==d]['Total tests per thousand'])\n",
    "        #print(d, num_of_tests)\n",
    "        date = datetime.datetime.strptime(d, '%b %d, %Y')\n",
    "        diff = date - start\n",
    "        int_diff = int(str(diff)[0])\n",
    "        if diff == 1:\n",
    "            #print(\"appending \" + num_of_tests)\n",
    "            tests_data.append(num_of_tests)\n",
    "            start = date\n",
    "        else:\n",
    "            for i in range(0, int_diff):\n",
    "                date = start + datetime.timedelta(days=1)\n",
    "                #print(\"appending \" + str(num_of_tests))\n",
    "                start = date\n",
    "                tests_data.append(num_of_tests)\n",
    "    return tests_data, start0, date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "total_test = pd.read_csv('covid_data/full-list-cumulative-total-tests-per-thousand.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "tests_RU, start_date, end_date = get_tests_data(total_test, 'Russia')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Getting COVID data from Hopkins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_covid_data(df, country, start_date):\n",
    "    covid_data = []\n",
    "    covid_country = df.loc[df['Country/Region'] == country]\n",
    "    end_date = datetime.datetime.strptime(df.columns[-1], \"%m/%d/%y\")\n",
    "    delta = timedelta(days=1)\n",
    "    while start_date <= end_date:\n",
    "        key = str(start_date.month) + \"/\" + str(start_date.day) + \"/\" + str(start_date.year)[:-2]\n",
    "        # print(key)\n",
    "        data = int(covid_country[key])\n",
    "        # print('appending', data)\n",
    "        covid_data.append(data)\n",
    "        start_date += delta\n",
    "    return covid_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "confirmed = pd.read_csv('covid_data/time_series_covid19_confirmed_global.csv')\n",
    "dead = pd.read_csv('covid_data/time_series_covid19_deaths_global.csv')\n",
    "recovered = pd.read_csv('covid_data/time_series_covid19_recovered_global.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "deaths_RU = get_covid_data(dead, 'Russia', start_date)\n",
    "conf_RU = get_covid_data(confirmed, 'Russia', start_date)\n",
    "recov_RU = get_covid_data(recovered, 'Russia', start_date)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Getting Apple mobility Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import date, timedelta\n",
    "# get_tests_data takes a dataframe with test data for a specified country,\n",
    "# creates an array of tests per 1000 people for every day since date start0\n",
    "# in case of missing entries for some day, repeats the entry from previous available day\n",
    "def get_mobility_data(df, country, start_date):\n",
    "    start = start_date\n",
    "    country_df = df.loc[df['region'] == country]\n",
    "    driving_data = []\n",
    "    walking_data = []\n",
    "    for d in list(country_df.columns[3:]):\n",
    "        key = str(start)[:-9]\n",
    "        driving = float(list(country_df[key])[0])\n",
    "        walking = float(list(country_df[key])[1])\n",
    "\n",
    "        date = datetime.datetime.strptime(d, '%Y-%m-%d')\n",
    "        #print(date, start)\n",
    "        if date < start:\n",
    "            continue\n",
    "            \n",
    "        #print(\"appending \", driving, walking)\n",
    "        driving_data.append(driving)\n",
    "        walking_data.append(walking)\n",
    "        start = date\n",
    "\n",
    "    return driving_data, walking_data, date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "apple_data = pd.read_csv('covid_data/applemobilitytrends-2020-04-17.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "drive, walk, end_date_mobility = get_mobility_data(apple_data, 'Russia', start_date)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Combining data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import copy\n",
    "from numpy import hstack\n",
    "from numpy import array\n",
    "def combine_data(df_seq, xtra_seq1, xtra_seq2, xtra_seq3):\n",
    "    new_xtra_1 = copy.deepcopy(xtra_seq1)\n",
    "    new_xtra_2 = copy.deepcopy(xtra_seq2)\n",
    "    new_xtra_3 = copy.deepcopy(xtra_seq3)\n",
    "    \n",
    "\n",
    "    while len(df_seq) > len(new_xtra_1):\n",
    "         new_xtra_1.append(new_xtra_1[-1])\n",
    "    while len(df_seq) > len(new_xtra_2):\n",
    "         new_xtra_2.append(new_xtra_2[-1])\n",
    "    while len(df_seq) > len(new_xtra_3):\n",
    "         new_xtra_3.append(new_xtra_3[-1])\n",
    "\n",
    "    while len(new_xtra_1) > len(df_seq):\n",
    "        new_xtra_1 = new_xtra_1[:-1]\n",
    "    while len(new_xtra_2) > len(df_seq):\n",
    "        new_xtra_2 = new_xtra_2[:-1]\n",
    "    while len(new_xtra_3) > len(df_seq):\n",
    "        new_xtra_3 = new_xtra_3[:-1]\n",
    "\n",
    "    sq1 = array(df_seq).reshape((len(df_seq), 1))\n",
    "    sq2 = array(new_xtra_1).reshape((len(new_xtra_1), 1))\n",
    "    sq3 = array(new_xtra_2).reshape((len(new_xtra_2), 1))\n",
    "    sq4 = array(new_xtra_3).reshape((len(new_xtra_3), 1))\n",
    "    \n",
    "    combo = hstack((sq1, sq2, sq3, sq4))\n",
    "    \n",
    "    return combo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# D - deaths\n",
    "# C - confirmed\n",
    "# R - recovered\n",
    "# T - tests\n",
    "# V - driving \n",
    "# W - walking\n",
    "DTVW = combine_data(deaths_RU, tests_RU, drive, walk)\n",
    "CTVW = combine_data(conf_RU, tests_RU, drive, walk)\n",
    "RTVW = combine_data(recov_RU, tests_RU, drive, walk)\n",
    "CTV_ = combine_data(conf_RU, tests_RU, drive, [1])\n",
    "CT_W = combine_data(conf_RU, tests_RU, [1], walk)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Splitting into testing and training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# predict on X data before Y data after\n",
    "def split_sequences3(sequences, n_steps_in, n_steps_out):\n",
    "    X, y = list(), list()\n",
    "    for i in range(len(sequences)):\n",
    "    # find the end of this pattern\n",
    "        end_ix = i + n_steps_in\n",
    "        out_end_ix = end_ix + n_steps_out\n",
    "        # check if we are beyond the dataset\n",
    "        if out_end_ix > len(sequences):\n",
    "            #print(i)\n",
    "            #print(end_ix)\n",
    "            #print(out_end_ix)\n",
    "            break\n",
    "        # gather input and output parts of the pattern\n",
    "        seq_x, seq_y = sequences[i:end_ix], sequences[end_ix:out_end_ix, :-3]\n",
    "        X.append(seq_x)\n",
    "        y.append(seq_y)\n",
    "    return array(X), array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def split_sequences3_1_7(sequences, n_steps_in):\n",
    "    X, y = list(), list()\n",
    "    for i in range(len(sequences)):\n",
    "    # find the end of this pattern\n",
    "        end_ix = i + n_steps_in\n",
    "        # check if we are beyond the dataset\n",
    "        if end_ix+7 > len(sequences):\n",
    "            #print(i)\n",
    "            #print(end_ix)\n",
    "            #print(out_end_ix)\n",
    "            break\n",
    "        # gather input and output parts of the pattern\n",
    "        seq_x, seq_y = sequences[i:end_ix], sequences[end_ix+6:end_ix+7, :-3]\n",
    "        X.append(seq_x)\n",
    "        y.append(seq_y)\n",
    "    return array(X), array(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Different options of models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import keras\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, LSTM\n",
    "from keras.layers import Bidirectional\n",
    "from keras.layers import Reshape\n",
    "from keras.layers import RepeatVector\n",
    "from keras.layers import TimeDistributed\n",
    "\n",
    "def gen_model_LSTM(n_steps_in, n_steps_out, n_features, loss_='mse', optimizer_ = 'adam'):\n",
    "    \n",
    "    # define model\n",
    "    model = Sequential()\n",
    "    model.add(LSTM(100, activation='relu', return_sequences=True, input_shape=(n_steps_in, n_features)))\n",
    "    model.add(LSTM(100, activation='relu'))\n",
    "    model.add(Dense(n_steps_out))\n",
    "    model.add(Dense(n_steps_out))\n",
    "    model.add(Reshape((n_steps_out,1)))\n",
    "    model.compile(optimizer=optimizer_, loss=loss_)\n",
    "    \n",
    "    return model\n",
    "\n",
    "def gen_model_EncDec(n_steps_in, n_steps_out, n_features, loss_='mse', optimizer_ = 'adam'):\n",
    "    \n",
    "    # define model\n",
    "    model = Sequential()\n",
    "    model.add(LSTM(100, activation='relu', input_shape=(n_steps_in, n_features)))\n",
    "    model.add(RepeatVector(n_steps_out))\n",
    "    model.add(LSTM(100, activation='relu', return_sequences=True))\n",
    "    model.add(LSTM(100, activation='relu', return_sequences=True))\n",
    "    model.add(TimeDistributed(Dense(1)))\n",
    "    model.compile(optimizer=optimizer_, loss=loss_)\n",
    "    \n",
    "    return model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def run_model(model, X, y, data, epochs_, validation_split_, v_=0):\n",
    "    \n",
    "    n_features = len(X[0][0])\n",
    "    n_steps_in = len(X[0])\n",
    "    n_steps_out = len(y[0])\n",
    "    \n",
    "    # demonstrate prediction\n",
    "    history = model.fit(X[:-1], y[:-1], validation_split = validation_split_, epochs=epochs_, verbose=v_)\n",
    "    print(history.history.keys())\n",
    "    plt.plot(history.history['loss'])\n",
    "    plt.plot(history.history['val_loss'])\n",
    "    plt.title('model loss')\n",
    "    plt.ylabel('loss')\n",
    "    plt.xlabel('epoch')\n",
    "    plt.legend(['loss', 'val_loss'], loc='upper left')\n",
    "    plt.show()\n",
    "    x_input = X[-1]\n",
    "    x_input = x_input.reshape((1, n_steps_in, n_features))\n",
    "    yhat = model.predict(x_input, verbose=0)\n",
    "    for i in range(len(y[-1])):\n",
    "        print(y[-1][i], yhat[0][i])\n",
    "    err = keras.losses.mean_squared_logarithmic_error([a[0] for a in y[-1]], [b[0] for b in yhat[0]])\n",
    "    print(\"msle: \", err)\n",
    "    \n",
    "    # predict future\n",
    "    history = model.fit(X, y, validation_split = validation_split_, epochs=epochs_, verbose=v_)\n",
    "    # summarize history for loss https://machinelearningmastery.com/display-deep-learning-model-training-history-in-keras/\n",
    "    print(history.history.keys())\n",
    "    plt.plot(history.history['loss'])\n",
    "    plt.plot(history.history['val_loss'])\n",
    "    plt.title('model loss')\n",
    "    plt.ylabel('loss')\n",
    "    plt.xlabel('epoch')\n",
    "    plt.legend(['train', 'test'], loc='upper left')\n",
    "    plt.show()\n",
    "    \n",
    "    x_input = data[-n_steps_in:]\n",
    "    x_input = x_input.reshape((1, n_steps_in, n_features))\n",
    "    yhat = model.predict(x_input, verbose=0)\n",
    "    for i in range(len(yhat[-1])):\n",
    "        print(yhat[0][i])\n",
    "    #print(\"CURRENT DIFF: \", yhat[0][2]-52763)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_and_run(data, model_type, n_steps_in, n_steps_out, loss_='mse', optimizer_='adam', epochs=400, validation_split_=0.2, v_=0):\n",
    "    print(\"Loss: \", loss_, \"\\t\", \"Days behind: \", n_steps_in)\n",
    "    X, y = split_sequences3(data, n_steps_in, n_steps_out)\n",
    "    n_features = len(data[0])\n",
    "    if model_type == 'EncDec':\n",
    "        model = gen_model_EncDec(n_steps_in, n_steps_out, n_features, loss_, optimizer_)\n",
    "    elif model_type == 'LSTM':\n",
    "        model = gen_model_LSTM(n_steps_in, n_steps_out, n_features, loss_, optimizer_)\n",
    "    else:\n",
    "        exit(-1)\n",
    "    run_model(model, X, y, data, epochs, validation_split_, v_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_and_run2(data, model_type, n_steps_in, loss_='mse', optimizer_='adam', epochs=400, validation_split_=0.2, v_=0):\n",
    "    print(\"Loss: \", loss_, \"\\t\", \"Days behind: \", n_steps_in)\n",
    "    X, y = split_sequences3_1_7(data, n_steps_in)\n",
    "    n_features = len(data[0])\n",
    "    if model_type == 'EncDec':\n",
    "        model = gen_model_EncDec(n_steps_in, 1, n_features, loss_, optimizer_)\n",
    "    elif model_type == 'LSTM':\n",
    "        model = gen_model_LSTM(n_steps_in, 1, n_features, loss_, optimizer_)\n",
    "    else:\n",
    "        exit(-1)\n",
    "    run_model(model, X, y, data, epochs, validation_split_, v_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss:  mse \t Days behind:  3\n",
      "[15770.] [15932.315]\n",
      "[18328.] [18439.422]\n",
      "[21102.] [21673.285]\n",
      "[24490.] [25310.93]\n",
      "[27938.] [29187.924]\n",
      "[32008.] [33697.59]\n",
      "[36793.] [38861.074]\n",
      "msle:  tf.Tensor(0.0013562577, shape=(), dtype=float32)\n",
      "[41412.688]\n",
      "[48367.254]\n",
      "[56171.04]\n",
      "[64958.375]\n",
      "[74875.875]\n",
      "[86382.19]\n",
      "[98771.31]\n",
      "CURRENT DIFF:  [3408.039]\n",
      "Loss:  msle \t Days behind:  3\n",
      "[15770.] [15794.393]\n",
      "[18328.] [18344.408]\n",
      "[21102.] [21428.814]\n",
      "[24490.] [24947.723]\n",
      "[27938.] [28922.553]\n",
      "[32008.] [33588.145]\n",
      "[36793.] [38842.72]\n",
      "msle:  tf.Tensor(0.001006052, shape=(), dtype=float32)\n",
      "[42669.004]\n",
      "[50480.207]\n",
      "[59819.633]\n",
      "[69356.44]\n",
      "[80324.73]\n",
      "[92496.5]\n",
      "[108500.89]\n",
      "CURRENT DIFF:  [7056.633]\n",
      "Loss:  mse \t Days behind:  5\n",
      "[15770.] [15350.869]\n",
      "[18328.] [17935.514]\n",
      "[21102.] [21083.674]\n",
      "[24490.] [23404.14]\n",
      "[27938.] [27257.488]\n",
      "[32008.] [31594.475]\n",
      "[36793.] [36213.406]\n",
      "msle:  tf.Tensor(0.0006115222, shape=(), dtype=float32)\n",
      "[43634.9]\n",
      "[50156.953]\n",
      "[57789.266]\n",
      "[66990.88]\n",
      "[77262.586]\n",
      "[89075.49]\n",
      "[102135.664]\n",
      "CURRENT DIFF:  [5026.2656]\n",
      "Loss:  msle \t Days behind:  5\n",
      "[15770.] [16046.986]\n",
      "[18328.] [18318.926]\n",
      "[21102.] [22164.926]\n",
      "[24490.] [24679.95]\n",
      "[27938.] [29148.64]\n",
      "[32008.] [34188.04]\n",
      "[36793.] [40182.234]\n",
      "msle:  tf.Tensor(0.0023832407, shape=(), dtype=float32)\n",
      "[44041.41]\n",
      "[50373.65]\n",
      "[58893.78]\n",
      "[67802.02]\n",
      "[78483.8]\n",
      "[88071.47]\n",
      "[101908.7]\n",
      "CURRENT DIFF:  [6130.7812]\n",
      "Loss:  mse \t Days behind:  7\n",
      "[15770.] [15585.532]\n",
      "[18328.] [18345.291]\n",
      "[21102.] [21537.025]\n",
      "[24490.] [24717.826]\n",
      "[27938.] [28272.19]\n",
      "[32008.] [32801.402]\n",
      "[36793.] [37865.773]\n",
      "msle:  tf.Tensor(0.00031545912, shape=(), dtype=float32)\n",
      "[43384.24]\n",
      "[49949.85]\n",
      "[58108.94]\n",
      "[66993.195]\n",
      "[76803.25]\n",
      "[88058.12]\n",
      "[100243.19]\n",
      "CURRENT DIFF:  [5345.9414]\n",
      "Loss:  msle \t Days behind:  7\n",
      "[15770.] [17321.016]\n",
      "[18328.] [19615.945]\n",
      "[21102.] [23036.182]\n",
      "[24490.] [25721.566]\n",
      "[27938.] [30332.938]\n",
      "[32008.] [33736.168]\n",
      "[36793.] [40135.12]\n",
      "msle:  tf.Tensor(0.005799484, shape=(), dtype=float32)\n",
      "[39240.45]\n",
      "[43998.555]\n",
      "[52848.38]\n",
      "[61826.08]\n",
      "[70938.57]\n",
      "[81415.58]\n",
      "[95557.24]\n",
      "CURRENT DIFF:  [85.37891]\n",
      "Loss:  mse \t Days behind:  8\n",
      "[15770.] [15870.12]\n",
      "[18328.] [18394.078]\n",
      "[21102.] [21978.777]\n",
      "[24490.] [25061.877]\n",
      "[27938.] [29132.77]\n",
      "[32008.] [33829.47]\n",
      "[36793.] [39015.535]\n",
      "msle:  tf.Tensor(0.0014999065, shape=(), dtype=float32)\n",
      "[43551.242]\n",
      "[50437.035]\n",
      "[58312.797]\n",
      "[67347.09]\n",
      "[77447.25]\n",
      "[89397.27]\n",
      "[102475.07]\n",
      "CURRENT DIFF:  [5549.797]\n",
      "Loss:  msle \t Days behind:  8\n",
      "[15770.] [15653.599]\n",
      "[18328.] [18643.953]\n",
      "[21102.] [21728.262]\n",
      "[24490.] [25479.727]\n",
      "[27938.] [29179.87]\n",
      "[32008.] [33911.74]\n",
      "[36793.] [39041.227]\n",
      "msle:  tf.Tensor(0.001645497, shape=(), dtype=float32)\n",
      "[46078.48]\n",
      "[52334.953]\n",
      "[60727.137]\n",
      "[70940.6]\n",
      "[81000.76]\n",
      "[95043.86]\n",
      "[107401.52]\n",
      "CURRENT DIFF:  [7964.1367]\n",
      "Loss:  mse \t Days behind:  9\n",
      "[15770.] [15659.926]\n",
      "[18328.] [18076.617]\n",
      "[21102.] [22595.426]\n",
      "[24490.] [25036.674]\n",
      "[27938.] [29213.77]\n",
      "[32008.] [33246.004]\n",
      "[36793.] [38826.63]\n",
      "msle:  tf.Tensor(0.0016757521, shape=(), dtype=float32)\n",
      "[45579.684]\n",
      "[52877.95]\n",
      "[61300.355]\n",
      "[70989.01]\n",
      "[82286.54]\n",
      "[94374.2]\n",
      "[108940.98]\n",
      "CURRENT DIFF:  [8537.355]\n",
      "Loss:  msle \t Days behind:  9\n",
      "[15770.] [16951.27]\n",
      "[18328.] [20530.133]\n",
      "[21102.] [21680.271]\n",
      "[24490.] [23208.188]\n",
      "[27938.] [28161.963]\n",
      "[32008.] [33746.227]\n",
      "[36793.] [38772.348]\n",
      "msle:  tf.Tensor(0.0039023508, shape=(), dtype=float32)\n",
      "[47177.28]\n",
      "[53860.043]\n",
      "[60147.105]\n",
      "[65302.406]\n",
      "[78906.41]\n",
      "[92252.02]\n",
      "[103390.94]\n",
      "CURRENT DIFF:  [7384.1055]\n",
      "Loss:  mse \t Days behind:  10\n",
      "[15770.] [16081.786]\n",
      "[18328.] [18460.498]\n",
      "[21102.] [22188.592]\n",
      "[24490.] [26192.754]\n",
      "[27938.] [29377.209]\n",
      "[32008.] [35240.848]\n",
      "[36793.] [39519.715]\n",
      "msle:  tf.Tensor(0.0034807867, shape=(), dtype=float32)\n",
      "[45104.125]\n",
      "[51831.637]\n",
      "[60683.496]\n",
      "[69571.68]\n",
      "[80499.875]\n",
      "[93058.016]\n",
      "[106689.86]\n",
      "CURRENT DIFF:  [7920.496]\n",
      "Loss:  msle \t Days behind:  10\n",
      "[15770.] [16961.373]\n",
      "[18328.] [19778.07]\n",
      "[21102.] [22918.643]\n",
      "[24490.] [25531.27]\n",
      "[27938.] [31350.04]\n",
      "[32008.] [35032.234]\n",
      "[36793.] [42704.57]\n",
      "msle:  tf.Tensor(0.009039995, shape=(), dtype=float32)\n",
      "[46137.734]\n",
      "[54005.21]\n",
      "[61496.996]\n",
      "[72016.57]\n",
      "[82145.984]\n",
      "[94061.14]\n",
      "[114931.945]\n",
      "CURRENT DIFF:  [8733.996]\n",
      "Loss:  mse \t Days behind:  3\n",
      "[15770.] [16002.189]\n",
      "[18328.] [18549.318]\n",
      "[21102.] [21651.598]\n",
      "[24490.] [25015.371]\n",
      "[27938.] [29194.549]\n",
      "[32008.] [33736.043]\n",
      "[36793.] [38763.125]\n",
      "msle:  tf.Tensor(0.0012699714, shape=(), dtype=float32)\n",
      "[42736.97]\n",
      "[50339.91]\n",
      "[57802.945]\n",
      "[66762.08]\n",
      "[76951.32]\n",
      "[88737.42]\n",
      "[102064.55]\n",
      "CURRENT DIFF:  [5039.9453]\n",
      "Loss:  msle \t Days behind:  3\n",
      "[15770.] [15308.834]\n",
      "[18328.] [18534.97]\n",
      "[21102.] [21874.955]\n",
      "[24490.] [25554.83]\n",
      "[27938.] [29860.203]\n",
      "[32008.] [35223.52]\n",
      "[36793.] [42690.332]\n",
      "msle:  tf.Tensor(0.0056860917, shape=(), dtype=float32)\n",
      "[42708.977]\n",
      "[50420.72]\n",
      "[59601.605]\n",
      "[68476.54]\n",
      "[79065.04]\n",
      "[92945.305]\n",
      "[108750.44]\n",
      "CURRENT DIFF:  [6838.6055]\n",
      "Loss:  mse \t Days behind:  5\n",
      "[15770.] [17188.512]\n",
      "[18328.] [19442.162]\n",
      "[21102.] [22007.375]\n",
      "[24490.] [25995.324]\n",
      "[27938.] [30331.156]\n",
      "[32008.] [34048.152]\n",
      "[36793.] [39376.14]\n",
      "msle:  tf.Tensor(0.004485537, shape=(), dtype=float32)\n",
      "[46981.934]\n",
      "[53833.453]\n",
      "[60120.516]\n",
      "[71624.484]\n",
      "[82527.336]\n",
      "[92189.44]\n",
      "[106331.24]\n",
      "CURRENT DIFF:  [7357.5156]\n",
      "Loss:  msle \t Days behind:  5\n",
      "[15770.] [16868.166]\n",
      "[18328.] [19991.932]\n",
      "[21102.] [21466.506]\n",
      "[24490.] [26607.88]\n",
      "[27938.] [30134.941]\n",
      "[32008.] [36791.57]\n",
      "[36793.] [42724.152]\n",
      "msle:  tf.Tensor(0.009531243, shape=(), dtype=float32)\n",
      "[45588.074]\n",
      "[52346.266]\n",
      "[58711.844]\n",
      "[70151.09]\n",
      "[80647.34]\n",
      "[95146.734]\n",
      "[111210.734]\n",
      "CURRENT DIFF:  [5948.8438]\n",
      "Loss:  mse \t Days behind:  7\n",
      "[15770.] [15739.298]\n",
      "[18328.] [18172.639]\n",
      "[21102.] [21238.604]\n",
      "[24490.] [24707.625]\n",
      "[27938.] [28455.893]\n",
      "[32008.] [32766.795]\n",
      "[36793.] [37769.87]\n",
      "msle:  tf.Tensor(0.00025271342, shape=(), dtype=float32)\n",
      "[43442.86]\n",
      "[51170.984]\n",
      "[59469.33]\n",
      "[68358.11]\n",
      "[78409.14]\n",
      "[89958.61]\n",
      "[103530.61]\n",
      "CURRENT DIFF:  [6706.328]\n",
      "Loss:  msle \t Days behind:  7\n",
      "[15770.] [15772.441]\n",
      "[18328.] [18679.154]\n",
      "[21102.] [21316.559]\n",
      "[24490.] [24729.957]\n",
      "[27938.] [28469.85]\n",
      "[32008.] [33928.254]\n",
      "[36793.] [40111.785]\n",
      "msle:  tf.Tensor(0.0016807725, shape=(), dtype=float32)\n",
      "[44631.543]\n",
      "[52595.96]\n",
      "[59894.11]\n",
      "[68927.04]\n",
      "[78750.92]\n",
      "[92543.984]\n",
      "[108827.125]\n",
      "CURRENT DIFF:  [7131.1094]\n",
      "Loss:  mse \t Days behind:  8\n",
      "[15770.] [15616.6875]\n",
      "[18328.] [18318.303]\n",
      "[21102.] [21113.46]\n",
      "[24490.] [24430.89]\n",
      "[27938.] [28245.654]\n",
      "[32008.] [32631.541]\n",
      "[36793.] [37602.66]\n",
      "msle:  tf.Tensor(0.0001525406, shape=(), dtype=float32)\n",
      "[44297.348]\n",
      "[51664.54]\n",
      "[59335.797]\n",
      "[69306.57]\n",
      "[79096.336]\n",
      "[91114.945]\n",
      "[104494.03]\n",
      "CURRENT DIFF:  [6572.797]\n",
      "Loss:  msle \t Days behind:  8\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-66-a72255316ec0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0msteps\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msteps_in\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ml\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlosses\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m             \u001b[0mgenerate_and_run\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mCTV_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msteps\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m7\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloss_\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-65-fd3e66722a3e>\u001b[0m in \u001b[0;36mgenerate_and_run\u001b[0;34m(data, model_type, n_steps_in, n_steps_out, loss_, optimizer_)\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m         \u001b[0mexit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0mrun_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-62-0ff54b388ac6>\u001b[0m in \u001b[0;36mrun_model\u001b[0;34m(model, X, y, epochs_)\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0;31m# demonstrate prediction\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m     \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mepochs_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m     \u001b[0mx_input\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0mx_input\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx_input\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_steps_in\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_features\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/Arkady/Desktop/Code/env/lib/python3.6/site-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_freq, max_queue_size, workers, use_multiprocessing, **kwargs)\u001b[0m\n\u001b[1;32m   1237\u001b[0m                                         \u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1238\u001b[0m                                         \u001b[0mvalidation_steps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalidation_steps\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1239\u001b[0;31m                                         validation_freq=validation_freq)\n\u001b[0m\u001b[1;32m   1240\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1241\u001b[0m     def evaluate(self,\n",
      "\u001b[0;32m/Users/Arkady/Desktop/Code/env/lib/python3.6/site-packages/keras/engine/training_arrays.py\u001b[0m in \u001b[0;36mfit_loop\u001b[0;34m(model, fit_function, fit_inputs, out_labels, batch_size, epochs, verbose, callbacks, val_function, val_inputs, shuffle, initial_epoch, steps_per_epoch, validation_steps, validation_freq)\u001b[0m\n\u001b[1;32m    194\u001b[0m                     \u001b[0mins_batch\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mins_batch\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtoarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    195\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 196\u001b[0;31m                 \u001b[0mouts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfit_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mins_batch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    197\u001b[0m                 \u001b[0mouts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mto_list\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mouts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    198\u001b[0m                 \u001b[0;32mfor\u001b[0m \u001b[0ml\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mo\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout_labels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mouts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/Arkady/Desktop/Code/env/lib/python3.6/site-packages/tensorflow_core/python/keras/backend.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m   3738\u001b[0m         \u001b[0mvalue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmath_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtensor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3739\u001b[0m       \u001b[0mconverted_inputs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3740\u001b[0;31m     \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_graph_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mconverted_inputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3741\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3742\u001b[0m     \u001b[0;31m# EagerTensor.numpy() will often make a copy to ensure memory safety.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/Arkady/Desktop/Code/env/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1079\u001b[0m       \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mFor\u001b[0m \u001b[0minvalid\u001b[0m \u001b[0mpositional\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mkeyword\u001b[0m \u001b[0margument\u001b[0m \u001b[0mcombinations\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1080\u001b[0m     \"\"\"\n\u001b[0;32m-> 1081\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1082\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1083\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcancellation_manager\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/Arkady/Desktop/Code/env/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, args, kwargs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1119\u001b[0m       raise TypeError(\"Keyword arguments {} unknown. Expected {}.\".format(\n\u001b[1;32m   1120\u001b[0m           list(kwargs.keys()), list(self._arg_keywords)))\n\u001b[0;32m-> 1121\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_flat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcancellation_manager\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1122\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1123\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_filtered_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/Arkady/Desktop/Code/env/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1222\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mexecuting_eagerly\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1223\u001b[0m       flat_outputs = forward_function.call(\n\u001b[0;32m-> 1224\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager)\n\u001b[0m\u001b[1;32m   1225\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1226\u001b[0m       \u001b[0mgradient_name\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_delayed_rewrite_functions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregister\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/Arkady/Desktop/Code/env/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    509\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    510\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"executor_type\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexecutor_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"config_proto\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 511\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    512\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    513\u001b[0m           outputs = execute.execute_with_cancellation(\n",
      "\u001b[0;32m/Users/Arkady/Desktop/Code/env/lib/python3.6/site-packages/tensorflow_core/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     59\u001b[0m     tensors = pywrap_tensorflow.TFE_Py_Execute(ctx._handle, device_name,\n\u001b[1;32m     60\u001b[0m                                                \u001b[0mop_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 61\u001b[0;31m                                                num_outputs)\n\u001b[0m\u001b[1;32m     62\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "# datas = [DTVW, CTVW, RTVW, CTV_, CT_W]\n",
    "types = ['EncDec', 'LSTM']\n",
    "steps_in = [3, 5, 7, 8, 9, 10]\n",
    "losses = ['mse', 'msle']\n",
    "for t in types:\n",
    "    for steps in steps_in:\n",
    "        for l in losses:\n",
    "            generate_and_run(CTV_, t, steps, 7, loss_=l)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss:  mse \t Days behind:  8\n",
      "dict_keys(['val_loss', 'loss'])\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[15770.] [16657.602]\n",
      "[18328.] [18585.729]\n",
      "[21102.] [21565.482]\n",
      "[24490.] [24930.133]\n",
      "[27938.] [28828.809]\n",
      "[32008.] [33436.918]\n",
      "[36793.] [38433.906]\n",
      "msle:  tf.Tensor(0.0012540612, shape=(), dtype=float32)\n",
      "dict_keys(['val_loss', 'loss'])\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[45560.742]\n",
      "[50916.69]\n",
      "[59330.594]\n",
      "[69714.57]\n",
      "[80557.72]\n",
      "[92814.04]\n",
      "[108194.164]\n"
     ]
    }
   ],
   "source": [
    "generate_and_run(CTV_, 'EncDec', 8, 7, loss_='mse', validation_split_=0.01, epochs=900)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss:  mse \t Days behind:  8\n",
      "dict_keys(['val_loss', 'loss'])\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[36793.] [36416.156]\n",
      "msle:  tf.Tensor(0.00010598526, shape=(), dtype=float32)\n",
      "dict_keys(['val_loss', 'loss'])\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[104067.43]\n"
     ]
    }
   ],
   "source": [
    "generate_and_run2(CTV_, 'EncDec', 8, loss_='mse', validation_split_=0.01, epochs=900, v_=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
